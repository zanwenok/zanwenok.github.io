<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>scifish</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zanwenok.github.io/"/>
  <updated>2018-08-19T08:37:17.395Z</updated>
  <id>https://zanwenok.github.io/</id>
  
  <author>
    <name>scifish</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 45. 跳跃游戏 II</title>
    <link href="https://zanwenok.github.io/2018/08/19/jump2/"/>
    <id>https://zanwenok.github.io/2018/08/19/jump2/</id>
    <published>2018-08-19T07:29:05.000Z</published>
    <updated>2018-08-19T08:37:17.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>给定一个非负整数数组，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>示例:</p><blockquote><p>   输入: [2,3,1,1,4]<br>    输出: 2<br>    解释: 跳到最后一个位置的最小跳跃数是 2。<br>    从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</p></blockquote><p>说明:</p><p>假设你总是可以到达数组的最后一个位置。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>输入为一个数组，每个元素为从此处跳跃的最远距离。为了用最少的跳跃次数达到数组尾部，直接的想法是每次都跳最远距离，直到最后一步能直接跳到终点。</p><p>但是上面这种贪心的思路很容易陷入局部最优，虽然每一步都跳当前位置所能跳的最远距离，但是可能之前跳稍微短一点的距离可以使下一步的能跳的最大距离更大。考虑如下跳跃的过程：<br>nums[0]-&gt;nums[2]-&gt;nums[3]-nums[4]，共3步。</p><p>nums[0]-&gt;nums[1]-&gt;nums[4]，共2步。</p><p>受上面过程的启发，可以想到本题的一个解法。假设当前在i位置，现在需要从i到i+nums[i]间选择一个位置作为本次跳跃的落点。遍历这些位置，计算再跳一步能达到最远位置的那个位置作为第一次的落点。有点绕，放个图就明白了：<br><img src="jump.png" height="256" width="256"></p><p>现在从A点出发，最远能跳到C，C最远到D；现在AC之间搜索一点B作为从A起跳的落点,使|AB|+|BE|最远。</p><p>python程序如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums <span class="keyword">or</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> self.jump_core(nums, <span class="number">0</span>, len(nums) <span class="number">-1</span> )</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump_core</span><span class="params">(self, nums, start, end)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start == end:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        next_index = start + nums[start]</span><br><span class="line">        <span class="keyword">if</span> next_index &gt;= end:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># never arrive</span></span><br><span class="line">        <span class="keyword">if</span> end &gt; start <span class="keyword">and</span> nums[start] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        next_max = next_index</span><br><span class="line">        next_next_max = next_max + nums[next_max]</span><br><span class="line">        <span class="keyword">for</span> next_tmp <span class="keyword">in</span> range(start+<span class="number">1</span>, next_index + <span class="number">1</span>):</span><br><span class="line">            next_next_tmp = next_tmp + nums[next_tmp]</span><br><span class="line">            <span class="keyword">if</span> next_next_tmp &gt; next_next_max:</span><br><span class="line">                next_max = next_tmp</span><br><span class="line">                next_next_max = next_max + nums[next_max]</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + self.jump_core(nums, next_max, end)</span><br></pre></td></tr></table></figure></p><hr><p>思路2<br>这是leetcode上发现的一用很优雅的解法，大体思想为：</p><p>记录上次的位置last_pos和现在所知的下次能跳的最远位置max_pos。遍历数组。<br>若当前位置i大于上次的位置，则进行一次跳跃，并更新上次所在的位置为现在所知的下次最远位置。</p><p>拿上面那张图来解释，在A时记录下一步到的最远位置为C，遍历到B时越过了上次所在的位置A，进行一次跳跃，并可将下一步能跳的最远距离更新为E。</p><p>python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        last_pos, max_pos, step = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line"><span class="keyword">if</span> i &gt; last_pos:</span><br><span class="line">last_pos = max_pos</span><br><span class="line">step += <span class="number">1</span></span><br><span class="line">max_pos = max(max_pos, i + nums[i])</span><br><span class="line">        <span class="keyword">return</span> step</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;给定一个非负整数数组，你最初位于数组的第一个位置。&lt;/p&gt;
&lt;p&gt;数组中的每个元素代表你在该位置可以跳跃的最大长度。&lt;/p&gt;
&lt;p&gt;你的目标
      
    
    </summary>
    
      <category term="leetcode" scheme="https://zanwenok.github.io/categories/leetcode/"/>
    
    
      <category term="algorithm" scheme="https://zanwenok.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>圆桌赌博</title>
    <link href="https://zanwenok.github.io/2018/08/17/%E5%9C%86%E6%A1%8C%E8%B5%8C%E5%8D%9A/"/>
    <id>https://zanwenok.github.io/2018/08/17/圆桌赌博/</id>
    <published>2018-08-17T14:13:06.000Z</published>
    <updated>2018-08-18T03:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>A, B, C, D四人围绕一个圆桌坐成一圈，按照如下规则进行圆桌赌博游戏：</p><ol><li>游戏开始时A，C各持有一枚均匀的骰子</li><li>在坐的每人向桌上放2元钱</li><li>持有骰子的人掷出自己的骰子，根据得到的点数决定是否将骰子传给其他人。若得到1点传给左边；若得到6点传给右边；否则自己保留骰子</li><li>若某一个人同时得到两枚骰子则被淘汰出局，并将骰子随机分给桌上剩下的两个不同的人</li><li>重复2到4步，直到剩下一个人，赢得桌上所有的钱。</li></ol><p>问：胜利者赢得钱数的期望。</p><h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3><p>如果仔细分析，桌上人持有骰子的情况可分为如下5种：<br><img src="status.PNG" alt="status"><br>用黑色的小人代表持有骰子的人，白色的代表没有骰子的人。游戏开始时为第1种情况，游戏开始时为第5种情况。</p><p>某一轮开始时为第1种情况，结束时可能变成1,2,3这三种情况；</p><p>某一轮开始时为第2种情况，结束时可能变成1,2,3这三种情况；</p><p>某一轮开始时为第3种情况，结束时可能变成3,4这两种情况；</p><p>某一轮开始时为第4种情况，结束时可能变成4,5这两种情况；</p><p>若将这几种情况视为5个状态，可将上述游戏过程看作一个马氏链。如下如图：<br><img src="chain.png" alt="chain"></p><p>记状态$s_i$到状态$s_j$的跳转概率为$p_{ij}$，则有：<br>$$p_{1,1} = (\frac{1}{6})^2 \times 2 + (\frac{2}{3})^2 = \frac{1}{2}$$</p><p>$$p_{1,2} = (\frac{1}{6}) \times (\frac{2}{3}) \times 4  = \frac{4}{9}$$</p><p>$$p_{1,3} = (\frac{1}{6})^2 \times 2  = \frac{1}{18}$$</p><p>$$p_{2,1} = (\frac{2}{3}) \times (\frac{1}{6}) \times 2 = \frac{2}{9}$$</p><p>$$p_{2,2} = (\frac{2}{3})^2 \times (\frac{1}{6})^2 \times 4  = \frac{5}{9}$$</p><p>$$p_{2,3} = (\frac{2}{3}) \times (\frac{1}{6}) \times 2 = \frac{2}{9}$$</p><p>$$p_{3,3} = (\frac{2}{3})^2  + (\frac{2}{3}) \times (\frac{1}{6}) \times 2 + (\frac{1}{6})^2 \times 3= \frac{3}{4}$$</p><p>$$p_{3,4} = (\frac{2}{3}) \times (\frac{1}{6}) \times 2 + (\frac{1}{6})^2 = \frac{1}{4}$$</p><p>$$p_{4,4} = (\frac{2}{3})^2 +  (\frac{1}{6})^2 \times 4= \frac{5}{9}$$</p><p>$$p_{4,5} = (\frac{2}{3}) \times  (\frac{1}{6})\times 4 = \frac{4}{9}$$</p><p>由于各个状态相互独立，我们可以分别求出各个状态到下个状态桌上钱增加的期望，然后累加便得到从其实状态到结束钱数的期望。</p><p>状态4到状态5可看作参数为$p_{4,5}$的几何分布，转移次数的期望为$\frac{1}{p_{4,5}} = \frac{9}{4}$，这个过程累加的钱数为$\frac{9}{4} \times 4 = 9$。</p><p>同样，状态3到状态4可看作参数为$p_{3,4}$的几何分布，转移次数的期望为$\frac{1}{p_{3,4}} = 4$，这个过程累加的钱数为$4 \times 6 = 24$。</p><p>剩下的情况比较复杂，我们可以设状态1到状态3和状态2到状态3转移次数为$X,Y$，则有:<br>$$E(X) = p_{1,1} \times (E(X)+1) + p_{1,2} \times (E(Y) + 1) + p_{1,3} \times 1$$<br>$$E(Y) = p_{2,2} \times (E(Y)+1) + p_{2,1} \times (E(X) + 1) + p_{2,3} \times 1$$<br>解上述方程组，可得$E(X)=7.2$, 这个过程累加的钱数为$7.2 \times 8 = 57.6$。</p><p>综上，最后一个人赢钱数目的期望为：$57.6 + 24 + 9 = 90.6$元。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;A, B, C, D四人围绕一个圆桌坐成一圈，按照如下规则进行圆桌赌博游戏：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;游戏开始时A，C各持有一枚均匀的骰子
      
    
    </summary>
    
      <category term="概率论" scheme="https://zanwenok.github.io/categories/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
    
      <category term="马氏链" scheme="https://zanwenok.github.io/tags/%E9%A9%AC%E6%B0%8F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>创世纪</title>
    <link href="https://zanwenok.github.io/2018/08/17/%E5%88%9B%E4%B8%96%E7%BA%AA/"/>
    <id>https://zanwenok.github.io/2018/08/17/创世纪/</id>
    <published>2018-08-17T08:06:43.000Z</published>
    <updated>2018-08-17T12:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想搭个博客用来记录每天的所学所想，今天闲下来行动了一下，没想到一不小心就创世成功了嘿嘿…  </p><p>我是机器学习方向的小硕一枚，在数据科学这个鱼塘遨游的十分欢快，故取id为scifish，希望早日脱离鱼塘成为捕鱼达人…</p><p>计划在这里写一些各种踩过的坑和有意思的paper、算法等，供自己以后查阅，当然小伙伴们若是能在这里有所收获是再好不过了。</p><p>那就先立个flag，每周至少更一篇技术类的文章，看看什么时候被打脸吧(逃…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直想搭个博客用来记录每天的所学所想，今天闲下来行动了一下，没想到一不小心就创世成功了嘿嘿…  &lt;/p&gt;
&lt;p&gt;我是机器学习方向的小硕一枚，在数据科学这个鱼塘遨游的十分欢快，故取id为scifish，希望早日脱离鱼塘成为捕鱼达人…&lt;/p&gt;
&lt;p&gt;计划在这里写一些各种踩过的坑
      
    
    </summary>
    
      <category term="碎碎念" scheme="https://zanwenok.github.io/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
</feed>
