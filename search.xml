<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[45. 跳跃游戏 II]]></title>
    <url>%2F2018%2F08%2F19%2Fjump2%2F</url>
    <content type="text"><![CDATA[问题给定一个非负整数数组，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 你的目标是使用最少的跳跃次数到达数组的最后一个位置。 示例: 输入: [2,3,1,1,4] 输出: 2 解释: 跳到最后一个位置的最小跳跃数是 2。 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。 说明: 假设你总是可以到达数组的最后一个位置。 思路输入为一个数组，每个元素为从此处跳跃的最远距离。为了用最少的跳跃次数达到数组尾部，直接的想法是每次都跳最远距离，直到最后一步能直接跳到终点。 但是上面这种贪心的思路很容易陷入局部最优，虽然每一步都跳当前位置所能跳的最远距离，但是可能之前跳稍微短一点的距离可以使下一步的能跳的最大距离更大。考虑如下跳跃的过程：nums[0]-&gt;nums[2]-&gt;nums[3]-nums[4]，共3步。 nums[0]-&gt;nums[1]-&gt;nums[4]，共2步。 受上面过程的启发，可以想到本题的一个解法。假设当前在i位置，现在需要从i到i+nums[i]间选择一个位置作为本次跳跃的落点。遍历这些位置，计算再跳一步能达到最远位置的那个位置作为第一次的落点。有点绕，放个图就明白了： 现在从A点出发，最远能跳到C，C最远到D；现在AC之间搜索一点B作为从A起跳的落点,使|AB|+|BE|最远。 python程序如下：12345678910111213141516171819202122232425262728293031class Solution(object): def jump(self, nums): """ :type nums: List[int] :rtype: int """ if not nums or len(nums) == 0: return 0 return self.jump_core(nums, 0, len(nums) -1 ) def jump_core(self, nums, start, end): if start == end: return 0 next_index = start + nums[start] if next_index &gt;= end: return 1 # never arrive if end &gt; start and nums[start] == 0: return 0 next_max = next_index next_next_max = next_max + nums[next_max] for next_tmp in range(start+1, next_index + 1): next_next_tmp = next_tmp + nums[next_tmp] if next_next_tmp &gt; next_next_max: next_max = next_tmp next_next_max = next_max + nums[next_max] return 1 + self.jump_core(nums, next_max, end) 思路2这是leetcode上发现的一用很优雅的解法，大体思想为： 记录上次的位置last_pos和现在所知的下次能跳的最远位置max_pos。遍历数组。若当前位置i大于上次的位置，则进行一次跳跃，并更新上次所在的位置为现在所知的下次最远位置。 拿上面那张图来解释，在A时记录下一步到的最远位置为C，遍历到B时越过了上次所在的位置A，进行一次跳跃，并可将下一步能跳的最远距离更新为E。 python代码如下： 12345678910111213class Solution(object): def jump(self, nums): """ :type nums: List[int] :rtype: int """ last_pos, max_pos, step = 0, 0, 0 for i in range(len(nums)): if i &gt; last_pos: last_pos = max_pos step += 1 max_pos = max(max_pos, i + nums[i]) return step]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[圆桌赌博]]></title>
    <url>%2F2018%2F08%2F17%2F%E5%9C%86%E6%A1%8C%E8%B5%8C%E5%8D%9A%2F</url>
    <content type="text"><![CDATA[问题A, B, C, D四人围绕一个圆桌坐成一圈，按照如下规则进行圆桌赌博游戏： 游戏开始时A，C各持有一枚均匀的骰子 在坐的每人向桌上放2元钱 持有骰子的人掷出自己的骰子，根据得到的点数决定是否将骰子传给其他人。若得到1点传给左边；若得到6点传给右边；否则自己保留骰子 若某一个人同时得到两枚骰子则被淘汰出局，并将骰子随机分给桌上剩下的两个不同的人 重复2到4步，直到剩下一个人，赢得桌上所有的钱。 问：胜利者赢得钱数的期望。 求解如果仔细分析，桌上人持有骰子的情况可分为如下5种：用黑色的小人代表持有骰子的人，白色的代表没有骰子的人。游戏开始时为第1种情况，游戏开始时为第5种情况。 某一轮开始时为第1种情况，结束时可能变成1,2,3这三种情况； 某一轮开始时为第2种情况，结束时可能变成1,2,3这三种情况； 某一轮开始时为第3种情况，结束时可能变成3,4这两种情况； 某一轮开始时为第4种情况，结束时可能变成4,5这两种情况； 若将这几种情况视为5个状态，可将上述游戏过程看作一个马氏链。如下如图： 记状态$s_i$到状态$s_j$的跳转概率为$p_{ij}$，则有：$$p_{1,1} = (\frac{1}{6})^2 \times 2 + (\frac{2}{3})^2 = \frac{1}{2}$$ $$p_{1,2} = (\frac{1}{6}) \times (\frac{2}{3}) \times 4 = \frac{4}{9}$$ $$p_{1,3} = (\frac{1}{6})^2 \times 2 = \frac{1}{18}$$ $$p_{2,1} = (\frac{2}{3}) \times (\frac{1}{6}) \times 2 = \frac{2}{9}$$ $$p_{2,2} = (\frac{2}{3})^2 \times (\frac{1}{6})^2 \times 4 = \frac{5}{9}$$ $$p_{2,3} = (\frac{2}{3}) \times (\frac{1}{6}) \times 2 = \frac{2}{9}$$ $$p_{3,3} = (\frac{2}{3})^2 + (\frac{2}{3}) \times (\frac{1}{6}) \times 2 + (\frac{1}{6})^2 \times 3= \frac{3}{4}$$ $$p_{3,4} = (\frac{2}{3}) \times (\frac{1}{6}) \times 2 + (\frac{1}{6})^2 = \frac{1}{4}$$ $$p_{4,4} = (\frac{2}{3})^2 + (\frac{1}{6})^2 \times 4= \frac{5}{9}$$ $$p_{4,5} = (\frac{2}{3}) \times (\frac{1}{6})\times 4 = \frac{4}{9}$$ 由于各个状态相互独立，我们可以分别求出各个状态到下个状态桌上钱增加的期望，然后累加便得到从其实状态到结束钱数的期望。 状态4到状态5可看作参数为$p_{4,5}$的几何分布，转移次数的期望为$\frac{1}{p_{4,5}} = \frac{9}{4}$，这个过程累加的钱数为$\frac{9}{4} \times 4 = 9$。 同样，状态3到状态4可看作参数为$p_{3,4}$的几何分布，转移次数的期望为$\frac{1}{p_{3,4}} = 4$，这个过程累加的钱数为$4 \times 6 = 24$。 剩下的情况比较复杂，我们可以设状态1到状态3和状态2到状态3转移次数为$X,Y$，则有:$$E(X) = p_{1,1} \times (E(X)+1) + p_{1,2} \times (E(Y) + 1) + p_{1,3} \times 1$$$$E(Y) = p_{2,2} \times (E(Y)+1) + p_{2,1} \times (E(X) + 1) + p_{2,3} \times 1$$解上述方程组，可得$E(X)=7.2$, 这个过程累加的钱数为$7.2 \times 8 = 57.6$。 综上，最后一个人赢钱数目的期望为：$57.6 + 24 + 9 = 90.6$元。]]></content>
      <categories>
        <category>概率论</category>
      </categories>
      <tags>
        <tag>马氏链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[创世纪]]></title>
    <url>%2F2018%2F08%2F17%2F%E5%88%9B%E4%B8%96%E7%BA%AA%2F</url>
    <content type="text"><![CDATA[一直想搭个博客用来记录每天的所学所想，今天闲下来行动了一下，没想到一不小心就创世成功了嘿嘿… 我是机器学习方向的小硕一枚，在数据科学这个鱼塘遨游的十分欢快，故取id为scifish，希望早日脱离鱼塘成为捕鱼达人… 计划在这里写一些各种踩过的坑和有意思的paper、算法等，供自己以后查阅，当然小伙伴们若是能在这里有所收获是再好不过了。 那就先立个flag，每周至少更一篇技术类的文章，看看什么时候被打脸吧(逃…]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
</search>
